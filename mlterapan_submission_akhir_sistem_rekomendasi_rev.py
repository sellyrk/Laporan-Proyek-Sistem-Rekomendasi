# -*- coding: utf-8 -*-
"""MLTerapan: Submission Akhir-Sistem Rekomendasi_Rev.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hnMT1K_OPAP6H6gUa25mX989WenxWOd4

## Business Understanding

### Problem Statements
Berdasarkan kondisi yang telah diuraikan sebelumnya, muncul dalam pertanyaan, seperti:
- Bagaimana sistem rekomendasi berbasis kesamaan kategori produk dapat membantu pengguna menemukan produk lain yang relevan?
- Bagaimana sistem ini dapat memberikan rekomendasi berdasarkan informasi kategori dan popularitas produk melalui rating?
- Bagaimana sistem ini dapat memberikan rekomendasi berdasarkan informasi kategori dan kualitas produk melalui total rekomendasi di tiap produk dari pengguna?

### Goals
Tujuan utama dari proyek analisis prediktif ini adalah untuk menjawab pertanyaan-pertanyaan di atas, beberapa tujuan spesifik yang ingin dicapai adalah sebagai berikut:
- Menyediakan rekomendasi produk yang relevan dengan teknik Content-Based Filtering menggunakan kesamaan kategori produk
- Memanfaatkan informasi kategori dan rating produk untuk menampilkan produk serupa yang lebih relevan bagi pengguna
- Memanfaatkan informasi kategori dan total rekomendasi tiap produk untuk menampilkan produk serupa yang lebih relevan bagi pengguna

### Solution statements
Dengan menggunakan Content-Based Filtering dengan TF-IDF dan Cosine Similarity

Pendekatan ini memanfaatkan representasi tekstual produk melalui teknik TF-IDF (Term Frequency-Inverse Document Frequency) untuk mengukur pentingnya kata-kata dalam kategori produk. Setiap produk akan direpresentasikan sebagai vektor berdasarkan kata kunci yang terdapat dalam kategori, dan kesamaan antar produk akan dihitung menggunakan cosine similarity. Dengan cara ini, sistem dapat merekomendasikan produk kepada pengguna berdasarkan kesamaan kategori dengan produk yang telah mereka pilih sebelumnya.

## Data Understanding

Dataset berisi 7.636 baris dan 19 kolom, dataset terdiri dari Kolom-kolomnya berisi brand_name, product_name, product_id, beauty_point_earned, price_range, price_by_combinations, url, active_date, default_category, categories, rating_types_str, average_rating, total_reviews, average_rating_by_types, total_recommended_count, total_repurchase_maybe_count, total_repurchase_no_count, total_repurchase_yes_count, total_in_wishlist. Variabel yang akan digunakan pada kasus kali ini sebagai parameter rekomendasi adalah variabel default_category. Kondisi data masih belum bersih dengan ditandai masih adanya missing values.

Referensi:
Hafizhan Ibrahim. "Sociolla: All Brands Products Catalog". Tautan: [https://www.kaggle.com/datasets/ibrahimhafizhan/sociolla-all-brands-products-catalog]. Diakses pada 27 Oktober 2024

## Data Loading
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

products = pd.read_csv('/content/products_all_brands.csv')
products

"""- Data berhasil terpanggil, di sini data terdiri dari 7636 baris dan 19 kolom.
- Kolom-kolomnya berisi brand_name, product_name, product_id, beauty_point_earned, price_range, price_by_combinations, url, active_date, default_category, categories, rating_types_str, average_rating, total_reviews, average_rating_by_types, total_recommended_count, total_repurchase_maybe_count, total_repurchase_no_count, total_repurchase_yes_count, total_in_wishlist

## Univariate Exploratory Data Analysis

Variabel-variabel pada Sociolla: All Brands Products Catalog  dataset adalah sebagai berikut:
- brand_name : id dan merek atau nama brand dari tiap produk, yang dipisahkan dengan garis bawah
- product_name : nama produk
- product_id : id produk
- beauty_point_earned : poin kecantikan yang diperoleh melalui pembelian
- price_range : kisaran umum harga produk
- price_by_combinations : kisaran khusus harga produk berdasarkan variasi produk yang berbeda
- url : URL link yang mengarahkan pada laman Sociolla.com
- active_date : Informasi tentang tanggal setiap produk menjadi aktif atau tersedia di Sociolla.com
- default_category : Kategori umum produk
- categories : Kategori khusus produk, untuk klasifikasi produk terperinci
- rating_types_str : Uasan konsumen tiap produk
- average_rating : Rata-rata rating penilaian produk
- total_reviews : Total konsumen yang memberikan ulasan
- average_rating_by_types : Rata-rata rating penilaian produk dalam aspek tertentu
- total_recommended_count : Total konsumen yang merekomendasikan produk
- total_repurchase_maybe_count : Total konsumen yang mungkin membeli produk ulang
- total_repurchase_no_count : Total konsumen yang tidak membeli produk ulang
- total_repurchase_yes_count : Total konsumen yang membeli produk ulang
- total_in_wishlist : Total konsumen yang memasukkan produk ke dalam wishlist

Variabel default_category, average_rating, dan total_recommended_count akan digunakan pada model rekomendasi. Sedangkan, variabel brand_name, product_name, dan price_range untuk melihat output yang dihasilkan.
"""

products.info()

print('Jumlah product_id: ', len(products.product_id.unique()))
print('Jumlah brand_name: ', len(products.brand_name.unique()))
print('Jumlah data average_rating: ', len(products.average_rating.unique()))
print('Jumlah data default_category: ', len(products.default_category.unique()))

"""Dengan fungsi unnique, dapat diketahui jika dataaset terdiri dari 7636 nama produk yang berbeda, 319 nama brand yang berbeda, 3187 nilai rating yang berbeda, dan 195 kategori produk yang berbeda

## Data Preparation

#### Memeriksa Data Terduplikasi
"""

products.duplicated().sum()

"""Data tidak memiliki data terduplikasi

#### Mengatasi Missing Value
"""

products.describe()

products.isnull().sum()

"""terdapat banyak missing values di beberapa kolom, seperti 'price_by_combinations', 'active_date', dan 'average_rating_by_types'. Untuk itu, kolom-kolom ini akan di drop, karena memiliki missing values dan nilai yang tidak terlalu berpengaruh terhadap tujuan rekomendasi.


Kolom-kolom lainnya yang tidak berpengaruh juga akan di drop, seperti 'beauty_point_earned', 'active_date', 'categories', 'rating_types_str', 'total_repurchase_maybe_count', 'total_repurchase_no_count', 'total_repurchase_yes_count'
"""

#Kolom yang tidak terlalu berpengaruh dan memiliki NaN didrop
products.drop(['beauty_point_earned'], inplace=True, axis=1)
products.drop(['price_by_combinations'], inplace=True, axis=1)
products.drop(['active_date'], inplace=True, axis=1)
products.drop(['categories'], inplace=True, axis=1)
products.drop(['rating_types_str'], inplace=True, axis=1)
products.drop(['average_rating_by_types'], inplace=True, axis=1)
products.drop(['total_repurchase_maybe_count'], inplace=True, axis=1)
products.drop(['total_repurchase_no_count'], inplace=True, axis=1)
products.drop(['total_repurchase_yes_count'], inplace=True, axis=1)
products

"""Dapat, dilihat, kolom-kolom yang tidak berpengaruh berhasil dihapus"""

products.isnull().sum()

"""Setelah diperiksa, nilai missing values sudah tidak ada

#### Memisahkan Nilai Kolom Name Brand

Dapat diketahui jika, kolom 'brand_name', tergabung dari dua values, yaitu nama brand, dan id brand, untuk itu dilakukan pemisahan dengan fungsi split()
"""

products[['brand_name_id', 'brand_name']] = products['brand_name'].str.split('_', expand=True)
products

"""Hasilnya pun, nilai berhasil dipisah, dan kolom 'brand_name_id' berhasil dibuat

#### TF-IDF Vectorizer

Teknik TF-IDF digunakan pada sistem rekomendasi untuk menemukan representasi fitur penting dari setiap kategori produk.
"""

products

from sklearn.feature_extraction.text import TfidfVectorizer

tf = TfidfVectorizer()
tf.fit(products['default_category'])
tf.get_feature_names_out()

tfidf_matrix = tf.fit_transform(products['default_category'])
tfidf_matrix.shape

"""Matriks berukuran (7636, 210). Nilai 7636 merupakan ukuran data dan 210 merupakan matrik kategori produk atau banyaknya tipe dari kategori produk"""

tfidf_matrix.todense()

"""Selanjutnya, matriks tf-idf untuk nama produk dan kategori produk."""

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=products['product_name'].values
).sample(20, axis=1).sample(20, axis=0)

"""Output sampel matriks tf-idf di atas menunjukkan Restaurant Shell Glow Highlighter (Like Shell Collection) termasuk dalam kategori highlighter. Hal ini terlihat dari nilai matriks 1.0 pada kategori highlighter. Begitu juga dengan Aloe Hydramild Facial Wash, termasuk dalam kategori face, dengan nilai 0.589674.

## Model Development dengan Content Based Filtering berdasarkan Kategori Produk

Teknik content based filtering akan merekomendasikan item yang mirip dengan item yang disukai pengguna di masa lalu. Pada tahap ini, ditemukan representasi fitur penting dari setiap kategori produk dengan tfidf vectorizer dan menghitung tingkat kesamaan dengan cosine similarity.

#### Cosine Similarity

Sekarang, dihitung derajat kesamaan (similarity degree) antar nama produk dengan teknik cosine similarity.
"""

from sklearn.metrics.pairwise import cosine_similarity
cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

"""Dihitung cosine similarity dataframe tfidf_matrix yang  diperoleh pada tahapan sebelumnya. Dengan satu baris kode untuk memanggil fungsi cosine similarity dari library sklearn, hasil similarity tiap nama produk sudah didapat, hasilnya berupa matriks kesamaan dalam bentuk array."""

cosine_sim_df = pd.DataFrame(cosine_sim, index=products['product_name'], columns=products['product_name'])
print('Shape:', cosine_sim_df.shape)

cosine_sim_df.sample(20, axis=1).sample(20, axis=0)

"""Dengan cosine similarity, berhasil mengidentifikasi kesamaan antar produk lainnya. Shape (7636, 7636) merupakan ukuran matriks similarity dari data. Namun, dalam output, hanya menampilkan sebanyak 20 sampel data saja.


Contoh: angka 1.0 pada Skin Buddy Dot Burst Face Wash dan Bio Renew Deep Cleanser menunjukkan dua produk ini memiliki kesamaan. Begitu juga, dengan Oh! So Bright Serum dengan Skin'o'tic Serum, yang juga mendapat nilai 1.0

#### Mendapatkan Rekomendasi

Sistem rekomendasi akan memberikan produk yang memiliki similarity terhadap produk yang diinput oleh pengguna berdasarkan kesamaan kategori dari produk-produk rekomendasi, hasil similarity tiap produk sudah didapat dari perhitungan sebelumnya.
"""

def products_recommendations(nama_produk, similarity_data=cosine_sim_df, items=products[['product_name',
                                                                                          'brand_name',
                                                                                          'price_range',]], k=10):
    index = similarity_data.loc[:,nama_produk].to_numpy().argpartition(
        range(-1, -k-1, -1))

    closest = similarity_data.columns[index[-1:-(k+2):-1]]
    closest = closest.drop(nama_produk, errors='ignore')
    recommendations = pd.DataFrame(closest, columns=['product_name']).merge(items, on='product_name')

    return recommendations.head(k)

"""Dibuat fungsi dengan nama products_recommendations, dengan nama_produk sebagai parameter pencarian, hasil kesamaan yang diambil dari cosine_sim_df, isi dari dataframe yang ingin ditampilkan dan k (jumlah rekomendasi yang diinginkan) sebanyak 10.

Lalu membuat index untuk mengambil urutan indek produk yang paling mirip, dengan similarity_data, dengan fungsi argpartition untuk mengurutkan indeks array berdasarkan skor kemiripan dari yang tertinggi ke terendah (berdasarkan parameter range(-1, -k-1, -1)).

Daftar produk disimpan dalam closest, dengan mengambil skor kemiripan tertinggi, lalu menghapus nama produk itu sendiri dari daftar rekomendasi. terakhir, dibuat variabel recommendation, untuk membuat dataframe dari data closest, column, dan items untuk digabung menjadi satu, dan nilai k dikembalikan.
"""

products['product_name'].unique()

products[products.product_name.eq('Repair Hair Mask')]

"""Output rekomendasi diharapkan akan memberikan produk serupa Repair Hair Mask, dengan kategori Hair Mask yang mirip"""

products_recommendations('Repair Hair Mask')

"""Output pun menampilkan 10 daftar produk rekomendasi yang memiliki kemiripan dengan Repair Hair Mask, dengan rentang harga dan asal brandnya juga

Menguji dengan nama produk lain
"""

products_recommendations('LIP COLOR')

products_recommendations('Centella Mask Pack')



"""## Model Development dengan Content Based Filtering berdasarkan Rating Produk

Teknik content based filtering akan merekomendasikan item yang mirip dengan item yang disukai pengguna di masa lalu. Pada tahap ini, ditemukan representasi fitur penting dari setiap kategori produk dengan tfidf vectorizer dan menghitung tingkat kesamaan berdasarkan rating dengan cosine similarity.

### Data Preparation

##### TF-IDF Vectorizer

Teknik TF-IDF digunakan pada sistem rekomendasi untuk menemukan representasi fitur penting dari setiap kategori produk.
"""

from sklearn.feature_extraction.text import TfidfVectorizer

tf = TfidfVectorizer()
tf.fit(products['default_category'])
tf.get_feature_names_out()

tfidf_matrix = tf.fit_transform(products['default_category'])
tfidf_matrix.shape

"""### Pemodelan

##### Cosine Similarity

Sekarang, dihitung derajat kesamaan (similarity degree) antar rating dari kategori yang sama pada produk dengan teknik cosine similarity.
"""

total_rating = products[['average_rating']].values
combined_features = np.hstack([total_rating, tfidf_matrix.toarray()])
cosine_sim_rating = cosine_similarity(combined_features)

"""Pada tahapan ini, dihitung cosine similarity dataframe tfidf_matrix yang diperoleh sebelumnya, lalu menyimpan nilai rating dalam variabel total_rating, dan menggabungkan dalam bentuk array dari hasil tfidf_matrix dengan nilai rating yang sudah disimpan"""

cosine_sim_df_2 = pd.DataFrame(cosine_sim_rating, index=products['product_name'], columns=products['product_name'])
print('Shape:', cosine_sim_df_2.shape)

cosine_sim_df_2.sample(20, axis=1).sample(20, axis=0)

"""Dengan cosine similarity, berhasil mengidentifikasi kesamaan antar produk lainnya. Shape (7636, 7636) merupakan ukuran matriks similarity dari data. Namun, dalam output, hanya menampilkan sebanyak 20 sampel data saja.


Contoh: angka 	0.961538 pada Papaya dan Clear Line N' Lash menunjukkan dua produk ini memiliki kesamaan kategori dan rating yang serupa

##### Mendapatkan Rekomendasi

Sistem rekomendasi akan memberikan produk yang memiliki similarity terhadap produk yang diinput oleh pengguna berdasarkan kesamaan kategori dan rating yang paling tinggi dari produk-produk rekomendasi, hasil similarity tiap produk sudah didapat dari perhitungan sebelumnya.
"""

def products_recommendations_by_rating(nama_produk, similarity_data=cosine_sim_df_2, items=products[['product_name',
                                                                                                     'brand_name',
                                                                                                     'price_range',
                                                                                                     'average_rating']], k=10):
    index = similarity_data.loc[:,nama_produk].to_numpy().argpartition(
        range(-1, -k-1, -1))

    closest = similarity_data.columns[index[-1:-(k+2):-1]]
    closest = closest.drop(nama_produk, errors='ignore')
    recommendations = pd.DataFrame(closest, columns=['product_name']).merge(items, on='product_name')
    recommendations = recommendations.sort_values(by='average_rating', ascending=False)

    return recommendations.head(k)

"""Dibuat fungsi dengan nama products_recommendations, dengan nama_produk sebagai parameter pencarian, hasil kesamaan yang diambil dari cosine_sim_df, isi dari dataframe yang ingin ditampilkan dan k (jumlah rekomendasi yang diinginkan) sebanyak 10.

Lalu membuat index untuk mengambil urutan indek produk yang paling mirip, dengan similarity_data, dengan fungsi argpartition untuk mengurutkan indeks array berdasarkan skor kemiripan dari yang tertinggi ke terendah (berdasarkan parameter range(-1, -k-1, -1)).

Daftar produk disimpan dalam closest, dengan mengambil skor kemiripan tertinggi, lalu menghapus nama produk itu sendiri dari daftar rekomendasi. terakhir, dibuat variabel recommendation, untuk membuat dataframe dari data closest, column, dan items untuk digabung menjadi satu, diberikan tambahan untuk mengurutkan produk rekomendasi dari rating yang paling tinggi dan nilai k dikembalikan.
"""

products['product_name'].unique()

products[products.product_name.eq('Repair Hair Mask')]

"""Output rekomendasi diharapkan akan memberikan produk serupa Repair Hair Mask, dengan kategori Hair Mask yang mirip"""

products_recommendations_by_rating('Repair Hair Mask')

"""Output pun menampilkan 10 daftar produk rekomendasi yang memiliki kemiripan dengan Repair Hair Mask, dengan rentang harga, asal brandnya, dan nilai rating dari yang paling tinggi ke terendah"""

products_recommendations_by_rating('MULTI EYE COLOR PALETTE')

"""## Model Development dengan Content Based Filtering berdasarkan Recommended Count

Teknik content based filtering akan merekomendasikan item yang mirip dengan item yang disukai pengguna di masa lalu. Pada tahap ini, ditemukan representasi fitur penting dari setiap kategori produk dengan tfidf vectorizer dan menghitung tingkat kesamaan berdasarkan total rekomendasi dengan cosine similarity.

### Data Preparation

##### TF-IDF Vectorizer

Teknik TF-IDF digunakan pada sistem rekomendasi untuk menemukan representasi fitur penting dari setiap kategori produk.
"""

products

from sklearn.feature_extraction.text import TfidfVectorizer

tf = TfidfVectorizer()
tf.fit(products['default_category'])
tf.get_feature_names_out()

tfidf_matrix = tf.fit_transform(products['default_category'])
tfidf_matrix.shape

"""### Pemodelan

##### Cosine Similarity

Sekarang, dihitung derajat kesamaan (similarity degree) antar total rekomendasi dari kategori yang sama pada produk dengan teknik cosine similarity.
"""

total_recommended_count = products[['total_recommended_count']].values
combined_features = np.hstack([total_recommended_count, tfidf_matrix.toarray()])
cosine_sim_recom = cosine_similarity(combined_features)

"""Pada tahapan ini, dihitung cosine similarity dataframe tfidf_matrix yang diperoleh sebelumnya, lalu menyimpan total rekomendasi dalam variabel total_recommended_count, dan menggabungkan dalam bentuk array dari hasil tfidf_matrix dengan total rekomendasi yang sudah disimpan"""

cosine_sim_df_3 = pd.DataFrame(cosine_sim_recom, index=products['product_name'], columns=products['product_name'])
print('Shape:', cosine_sim_df_3.shape)

cosine_sim_df_3.sample(20, axis=1).sample(20, axis=0)

"""Dengan cosine similarity, berhasil mengidentifikasi kesamaan antar produk lainnya. Shape (7636, 7636) merupakan ukuran matriks similarity dari data. Namun, dalam output, hanya menampilkan sebanyak 20 sampel data saja.


Contoh: angka 1.000000 pada Hand Butter Set (3pcs) dan Botanical Essentials - Bundle PATCHOULI Body Lotion and Hand Sanitizer menunjukkan dua produk ini memiliki kesamaan kategori dan total rekomendasi yang serupa

##### Mendapatkan Rekomendasi

Sistem rekomendasi akan memberikan produk yang memiliki similarity terhadap produk yang diinput oleh pengguna berdasarkan kesamaan kategori dan rating yang paling tinggi dari produk-produk rekomendasi, hasil similarity tiap produk sudah didapat dari perhitungan sebelumnya.
"""

def products_recommendations_by_count_recom(nama_produk, similarity_data=cosine_sim_df_3, items=products[['product_name',
                                                                                                     'brand_name',
                                                                                                     'price_range',
                                                                                                     'total_recommended_count']], k=10):
    index = similarity_data.loc[:,nama_produk].to_numpy().argpartition(
        range(-1, -k-1, -1))

    closest = similarity_data.columns[index[-1:-(k+2):-1]]
    closest = closest.drop(nama_produk, errors='ignore')
    recommendations = pd.DataFrame(closest, columns=['product_name']).merge(items, on='product_name')
    recommendations = recommendations.sort_values(by='total_recommended_count', ascending=False)

    return recommendations.head(k)

"""Dibuat fungsi dengan nama products_recommendations, dengan nama_produk sebagai parameter pencarian, hasil kesamaan yang diambil dari cosine_sim_df, isi dari dataframe yang ingin ditampilkan dan k (jumlah rekomendasi yang diinginkan) sebanyak 10.

Lalu membuat index untuk mengambil urutan indek produk yang paling mirip, dengan similarity_data, dengan fungsi argpartition untuk mengurutkan indeks array berdasarkan skor kemiripan dari yang tertinggi ke terendah (berdasarkan parameter range(-1, -k-1, -1)).

Daftar produk disimpan dalam closest, dengan mengambil skor kemiripan tertinggi, lalu menghapus nama produk itu sendiri dari daftar rekomendasi. terakhir, dibuat variabel recommendation, untuk membuat dataframe dari data closest, column, dan items untuk digabung menjadi satu, diberikan tambahan untuk mengurutkan produk rekomendasi dari total rekomendasi yang paling banyak dan nilai k dikembalikan.
"""

products['product_name'].unique()

products[products.product_name.eq('Repair Hair Mask')]

"""Output rekomendasi diharapkan akan memberikan produk serupa Repair Hair Mask, dengan kategori Hair Mask yang mirip"""

products_recommendations_by_count_recom('Repair Hair Mask')

"""Output pun menampilkan 10 daftar produk rekomendasi yang memiliki kemiripan dengan Repair Hair Mask, dengan rentang harga, asal brandnya, dan total rekomendasi dari yang paling banyak ke yang sedikit"""

products_recommendations_by_count_recom('VELVET LIP TINT')

